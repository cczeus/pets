{
  "_args": [
    [
      {
        "raw": "kayn@^0.3.0",
        "scope": null,
        "escapedName": "kayn",
        "name": "kayn",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "/Users/chriszuis/dev/pets"
    ]
  ],
  "_from": "kayn@>=0.3.0 <0.4.0",
  "_id": "kayn@0.3.0",
  "_inCache": true,
  "_location": "/kayn",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/kayn-0.3.0.tgz_1508873706092_0.598180599976331"
  },
  "_npmUser": {
    "name": "chautnguyen",
    "email": "chautnguyen96@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "kayn@^0.3.0",
    "scope": null,
    "escapedName": "kayn",
    "name": "kayn",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/kayn/-/kayn-0.3.0.tgz",
  "_shasum": "9d0dc7934eae0ed30f266c708fcf0fc153e7c695",
  "_shrinkwrap": null,
  "_spec": "kayn@^0.3.0",
  "_where": "/Users/chriszuis/dev/pets",
  "author": {
    "name": "Chau Nguyen",
    "email": "chautnguyen96@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/cnguy/kayn/issues"
  },
  "dependencies": {
    "babel-polyfill": "^6.26.0",
    "dotenv": "^4.0.0",
    "redis": "^2.8.0",
    "request": "^2.83.0",
    "riot-ratelimiter": "^0.0.9"
  },
  "description": "An elegant way of querying League of Legend's API. `kayn` is a reimplementation of `kindred-api`.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-istanbul": "^0.12.2",
    "babel-plugin-module-resolver": "^2.7.1",
    "babel-preset-env": "^1.6.1",
    "babel-preset-stage-3": "^6.24.1",
    "chai": "^4.1.2",
    "esdoc": "^1.0.3",
    "esdoc-standard-plugin": "^1.0.0",
    "istanbul": "^0.4.5",
    "mocha": "^4.0.1",
    "prettier": "^1.7.4",
    "rimraf": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "9d0dc7934eae0ed30f266c708fcf0fc153e7c695",
    "tarball": "https://registry.npmjs.org/kayn/-/kayn-0.3.0.tgz"
  },
  "homepage": "https://github.com/cnguy/kayn#readme",
  "license": "MIT",
  "licenseText": "Copyright 2017 github.com/cnguy \n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "main": "index.js",
  "maintainers": [
    {
      "name": "chautnguyen",
      "email": "chautnguyen96@gmail.com"
    }
  ],
  "name": "kayn",
  "optionalDependencies": {},
  "readme": "An elegant way of querying League of Legend's API. `kayn` is a reimplementation of `kindred-api`.\n\n[![NPM](https://nodei.co/npm/kayn.png)](https://nodei.co/npm/kayn/)\n\n[![Build Status](https://travis-ci.org/cnguy/kayn.svg?branch=master)](https://travis-ci.org/cnguy/kayn)\n[![codecov](https://codecov.io/gh/cnguy/kayn/branch/master/graph/badge.svg)](https://codecov.io/gh/cnguy/kayn)\n[![dependencies Status](https://david-dm.org/cnguy/kayn/status.svg)](https://david-dm.org/cnguy/kayn)\n\n\n\n\nWiki is not updated. It currently is documentation about the old `kindred-api`.\n\n# Table of Contents:\n* [Why](#why)\n* [Documentation](#documentation)\n* [Installation](#installation)\n* [Features](#features)\n* [Planned Features](#planned-features)\n* [Basic Usage / Initialization / Configuration](#basic-usage)\n* [Current API](#current-api)\n    * [Request Naming Conventions](#request-naming-conventions)\n    * [Setting the Region of a Request](#setting-the-region-of-a-request)\n    * [Adding Query Parameters to a Request](#adding-query-parameters-to-a-request)\n    * [Promises](#promises)\n    * [Await](#await)\n    * [Callbacks](#callbacks)\n    * [High-level Overview of API](#high-level-overview-of-api)\n* [Caching](#caching)\n* [TypeScript](#typescript)\n* [Bugs](#bugs)\n* [Changelog](#changelog)\n* [Disclaimer](#disclaimer)\n\n# Why\n\nSo I decided to come back to rewrite this `kindred-api` (API looks the same, but trust me your old code will not remotely work) since the code really bothered me, and I have a lot of time now (I quit work). Better code => more likely to not ditch it later.\n\n# Documentation\n\nStill under construction!\n\nESDoc -http://kayn.surge.sh/\n\n# Installation\n\n```sh\nyarn add kayn\n```\n\n# Features\n\n* [Rate limiting](https://github.com/Colorfulstan/RiotRateLimiter-node) \n* All regular endpoints implemented\n* Basic caching (in memory cache, redis cache)\n* API works with both callbacks & promises\n* Basic TypeScript support (WIP)\n\n# Planned Features\n\n## Whenever\n\n* Tournament\n* DDragon\n\n# Basic Usage\n\nWhen you import the Kayn class,\n\n```javascript\nconst { Kayn } = require('kayn');\n```\n\nyou're actually importing the `init` function.\n\n```javascript\nconst init = key => config => {\n  return new Kayn(key, config);\n};\n```\n\nThis means you don't have to construct the object using `new`. Furthermore, `init` will automatically look for a `.env` file that has the key-value pair below:\n\n```sh\n# .env\nRIOT_LOL_API_KEY=<key>\n```\n\nUsing this is preferable as you generally don't commit `.env` files to GitHub.\n\n```javascript\nconst {\n  Kayn,\n  REGIONS,\n  METHOD_NAMES,\n  BasicJSCache,\n  RedisCache,\n} = require('kayn');\n\n// to initialize Kayn without a .env file\n// const Kayn = Kayn('mykey')()\n// notice the second parentheses is mandatory because\n// init exports a second function\n// that takes in an optional config\n\nconst kayn = Kayn('my-optional-key')({\n  // DEFAULT CONFIG\n  // if you pass in a config,\n  // the rest of the top-level config will be merged\n  // into your config.\n  // ex: if you pass in just debugOptions to disable it,\n  // requestOptions and the (empty) cacheOptions will be used \n  region: 'na',\n  debugOptions: {\n    isEnabled: true,\n    showKey: false,\n  },\n  requestOptions: {\n    shouldRetry: true,\n    numberOfRetriesBeforeAbort: 3,\n    delayBeforeRetry: 1000,\n    burst: false,\n  },\n  cacheOptions: {\n    cache: null,\n    ttls: {}, \n  },\n});\n\n// callback style is meh\n  kayn.Summoner.by\n    .name('Contractz')\n    .region('na') // if this is not appended, default region is used\n    .callback(function(err, summoner) {\n      if (err) {\n        console.log('could not get summoner');\n      } else {\n        console.log('got the summoner data');\n        console.log('will try to get number of matches');\n        kayn.Matchlist.by\n          .accountID(summoner.accountId)\n          .region('na')\n          .query({ season: 9 })\n          .query({ champion: 67 })\n          .callback(function(err, matchlistDTO) {\n            if (err) {\n              console.log('matchlist error');\n            } else {\n              console.log('callback style meh');\n              console.log(\n                'number of matches callback style:',\n                matchlistDTO.matches.length,\n              );\n            }\n          });\n      }\n    });\n\n  kayn.Summoner.by\n    .name('Contractz')\n    .region(REGIONS.NORTH_AMERICA)\n    .then(summoner => {\n      return kayn.Matchlist.by\n        .accountID(summoner.accountId)\n        .query({ season: 9 });\n    })\n    .then(matchlistDTO => {\n      console.log('number of matches:', matchlistDTO.matches.length);\n    })\n    .catch(err => console.error(err));\n\n  kayn.Summoner.by\n    .name('Contractz')\n    .then(summoner => {\n      return kayn.Runes.by.summonerID(summoner.id);\n    })\n    .then(runes => {\n      console.log('number of rune pages:', runes.pages.length);\n    })\n    .catch(err => console.error('runes error'));\n  \n  const main = async () => {\n    const summoner = await kayn.Summoner.by.name('Contractz');\n    const matchlistDTO = await kayn.Matchlist.by.summonerID(summoner.id);\n    console.log(summoner, matchlistDTO);\n  }\n```\n\nCheck `example.js` and the files in the `recipes` directory (they're more just random composition of functions lol) for more usage.\n\n# Current API\n\n`kayn` methods do not take `region`, `query`, or `callback` arguments like in `kindred-api` and other libraries. As of now, the maximum amount of arguments a `kayn` method can take is 1, with one exception (ChampionMastery.get, which takes 2). You'll see why later below.\n\n`kayn`'s api is reliant on regions instead of platform ids. Regions are transformed to platform ids within the code wherever necessary.\n\n## Request Naming Conventions \n\n`get`: to target and grab something specific, where the parameters are also easy to guess (Match.get would be grabbing a match via its match id). However, runes/matchlist take different arguments (summoner id vs account id), and so they use the `by.xxx` naming below.\n\n`list`: to list out something (e.g. a list of champions, a list of challengers, etc).\n\n`by.xxx`: `by.summonerName`, `by.accountID`, `by.summonerID` is everywhere necessary (e.g. `Matchlist.by.accountID`, `Runes.by.summonerID`). It's explicit for `Matchlist`, `Masteries`, etc to make the call much more clear. However, the `Summoner` namespace simply uses `name`, `id`, and `accountID`. I have not added extra methods like `Matchlist.by.summonerName` yet. This naming makes the request parameter guessable.\n\n## Setting the Region of a Request\n\nAppend `.region(regionAbbr)` to a call to set the region. If no region is appended, then we use the default region which is `na` or whatever the user passed in.\n\n```javascript\nkayn.Summoner.by.name('Faker').region('kr')\n```\n\n## Adding Query Parameters to a Request\n\nAppend `.query(key->value)` to a call to add a query. A query is just a regular JavaScript object. Therefore, you can either chain multiple query parameters together, or pass in a whole blob at once.\n\n```javascript\nconst config = {\n    season: 7,\n    champion: 67,\n    queue: 420,\n}\n\nkayn.Matchlist.by.accountID(accountID).query(config)\n\nkayn.Matchlist.by.accountID(accountID)\n    .query({ season: 7 })\n    .query({ champion: 67 })\n    .query({ queue: 420 })\n```\n\n## Promises\n\nAll `kayn` methods support promises. \n\n```javascript\nconst promise = kayn.Summoner.by.name('Contractz')\npromise\n    .then(data => console.log(data))\n    .catch(err => console.error(err))\n```\n\n## Await\n\nNaturally, you can `await` any method as long as you have not called `.callback`.\n\n```javascript\nconst main = async () => {\n    try {\n        const summoner = await kayn.Summoner.by.name('Contractz')\n    } catch (ex) {\n        console.error(ex)\n    }\n}\n```\n\n## Callbacks\n\nThis is simply a renaming of `superagent`'s `end` method. As stated before, `kayn` methods do not have callback parameters.\n\nHowever, passing in callbacks is still trivial. This is similar to how `region` and `query` are set as well (thanks `superagent`).\n\n```javascript\nconst printBoth = (err, data) => console.log(err, data)\nkayn.Summoner.by.name('Contractz').callback(printBoth)\n```\n\n## High-level Overview of API\n\nThis is all (both endpoints & methods) in the same order as in the official docs.\n\nNote that the API is not fully consistent. I wanted the API to be readable & easy-to-use-without-documentation, but still be somewhat terse, and so exceptions had to be made for now.\n\nAlso note that there is not a one-to-one mapping between namespaces/methods & the official endpoints/resources -- This API somewhat mirrors `kindred-api` in that I separated some resources to make it more convenient for the user (`Matchlist`, `CurrentGame`, and `FeaturedGames` are some examples of this, as `Matchlist` actually belongs to `Match`, and `CurrentGame` and `FeaturedGames` both belong to `Spectator`).\n\n```javascript\n/* CHAMPION-MASTERY-V3 */\nChampionMastery.list(summonerID: int)\nChampionMastery.get(summonerID: int)(championID: int)\nChampionMastery.totalScore(summonerID: int)\n\n/* CHAMPION-V3 */\nChampion.list()\nChampion.get(championID: int)\n\n/* LEAGUE-V3 */\nChallenger.list(queueName: string)\nLeagues.by.summonerID(summonerID: int)\nLeague.by.uuid(leagueUUID: string)\nMaster.list(queueName: string)\nLeaguePositions.by.summonerID(summonerID: int)\n\n/* LOL-STATIC-DATA-V3 */\nStatic.Champion.list()\nStatic.Champion.get(championID: int)\nStatic.Item.list()\nStatic.Item.get(itemID: int)\nStatic.LanguageString.list()\nStatic.Language.list()\nStatic.Map.get()\nStatic.Mastery.list()\nStatic.Mastery.get(masteryID: int)\nStatic.ProfileIcon.list()\nStatic.Realm.get()\nStatic.Rune.list()\nStatic.Rune.get(runeID: int)\nStatic.SummonerSpell.list()\nStatic.SummonerSpell.get(summonerSpellID: int)\nStatic.Version.list()\n\n/* LOL-STATUS-V3 */\nStatus.get()\n\n/* MASTERIES-V3 */\nMasteries.by.summonerID(summonerID: int)\n\n/* MATCH-V3 */\nMatch.get(matchID: int)\nMatchlist.by.accountID(accountID: int)\nMatchlist.Recent.by.accountID(accountID: int)\nMatch.timeline(matchID: int)\n\n/* RUNES-V3 */\nRunes.by.summonerID(summonerID: int)\n\n/* SPECTATOR-V3 */\nCurrentGame.by.summonerID(summonerID: int)\nFeaturedGames.list()\n\n/* SUMMONER-V3 */\nSummoner.by.name(summonerName: string)\nSummoner.by.id(summonerID: int)\nSummoner.by.accountID(accountID: int)\n```\n\n# Caching\n\nTo cache, firstly create some Cache that has a get/set function, and then pass it to `cacheOptions.cache`.\n\n`ttls` are method ttls. This part is pretty inconvenient right now. Suggestions are welcome.\n\nCurrent caches:\n* basic in-memory cache \n* Redis cache\n\n```javascript\nimport {\n    Kayn,\n    REGIONS,\n    METHOD_NAMES,\n    BasicJSCache,\n    RedisCache,\n} from 'kayn';\n\nconst redisCache = new RedisCache({\n  host: 'localhost',\n  port: 5000,\n  keyPrefix: 'kayn',\n})\n\nconst basicCache = new BasicCache();\n\nconst myCache = redisCache; // or basicCache\n\nconst kayn = Kayn(/* optional key */)({\n  region: 'na',\n  debugOptions: {\n    isEnabled: true,\n    showKey: false,\n  },\n  requestOptions: {\n    shouldRetry: true,\n    numberOfRetriesBeforeAbort: 3,\n    delayBeforeRetry: 1000,\n  },\n  cacheOptions: {\n    cache: myCache,\n    ttls: {\n        [METHOD_NAMES.SUMMONER.GET_BY_SUMMONER_NAME]: 1000, // ms\n    },\n  },\n});\n\nkayn.Summoner.by.name('Contractz').then(() => kayn.Summoner.by.name('Contractz'));\n\n/*\n200 @ https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/Contractz\nCACHE HIT @ https://na1.api.riotgames.com/lol/summoner/v3/summoners/by-name/Contractz\n*/\n```\n\n# TypeScript\n\nTypeScript support should automatically be integrated upon requiring this module.\n\nsource: [index.d.ts](https://github.com/cnguy/kayn/blob/master/typings/index.d.ts)\n\nThis will be improved over time.\n\n`any`'s should be removed\nenums gotta get fixed\n\n# Bugs\n\nFeel free to make an issue (bug, typos, questions, suggestions, whatever) or pull request to fix an issue. Just remember to run `prettier` (via `yarn lint`).\n\nCurrently, there are no tests. A lot of the code has already been tested in `kindred-api`, and due to the fact that this libary now relies on a 3rd party rate limiter, it has become much less time consuming to test the API. Also, due to the new `Request` interface (using `superagent`'s API), I no longer have to spend time testing various functions and their various parameters.\n\nTests will be added regardless though over time.\n\nExpect a few bugs here and there because I rapidly rewrote this (it wasn't hard to using the `Request` class I made).\n\nPackage commands:\n\n* `yarn lint`\nfor `prettier` (will add `eslint` to `prettier` soon)\n* `yarn example`\nto run the various files in `./examples`\n* `yarn build`\nto build. `yarn example` runs this command\n* `yarn test`\ndoes not exist atm\n\n# Changelog\n\nGo to [CHANGELOG.md](https://github.com/cnguy/kayn/blob/master/CHANGELOG.md).\n\n# Disclaimer\n\n`kayn` isn't endorsed by Riot Games and doesn't reflect the views or opinions of Riot Games or anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games are trademarks or registered trademarks of Riot Games, Inc. League of Legends © Riot Games, Inc.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cnguy/kayn.git"
  },
  "scripts": {
    "build": "rimraf dist/ && babel ./ --out-dir dist/ --ignore ./node_modules,./.babelrc,./package.json,./npm-debug.log --copy-files",
    "docs": "esdoc ./lib/**/*.js",
    "example": "yarn build && babel ./example.js -o ./example.babel.js && node example.babel.js",
    "lint": "prettier --single-quote --list-different --trailing-comma all --write \"./lib/**/*.js\"",
    "lint-test": "prettier --single-quote --list-different --trailing-comma all --write \"./test/**/*.js\"",
    "test": "yarn build && yarn lint; yarn lint-test; yarn test-only",
    "test-only": "babel-node ./node_modules/.bin/babel-istanbul cover ./node_modules/mocha/bin/_mocha -- --require babel-register \"test/**/*.spec.js\""
  },
  "types": "./typings/index.d.ts",
  "version": "0.3.0"
}
