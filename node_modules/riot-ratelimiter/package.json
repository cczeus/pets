{
  "_args": [
    [
      {
        "raw": "riot-ratelimiter@^0.0.9",
        "scope": null,
        "escapedName": "riot-ratelimiter",
        "name": "riot-ratelimiter",
        "rawSpec": "^0.0.9",
        "spec": ">=0.0.9 <0.0.10",
        "type": "range"
      },
      "/Users/chriszuis/dev/pets/node_modules/kayn"
    ]
  ],
  "_from": "riot-ratelimiter@>=0.0.9 <0.0.10",
  "_id": "riot-ratelimiter@0.0.9",
  "_inCache": true,
  "_location": "/riot-ratelimiter",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/riot-ratelimiter-0.0.9.tgz_1507792863469_0.09554476337507367"
  },
  "_npmUser": {
    "name": "colorfulstan",
    "email": "npm@krispin.it"
  },
  "_npmVersion": "5.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "riot-ratelimiter@^0.0.9",
    "scope": null,
    "escapedName": "riot-ratelimiter",
    "name": "riot-ratelimiter",
    "rawSpec": "^0.0.9",
    "spec": ">=0.0.9 <0.0.10",
    "type": "range"
  },
  "_requiredBy": [
    "/kayn"
  ],
  "_resolved": "https://registry.npmjs.org/riot-ratelimiter/-/riot-ratelimiter-0.0.9.tgz",
  "_shasum": "69eac67a9f1fb25d4b4082d3f1e281d9ef5ed8c9",
  "_shrinkwrap": null,
  "_spec": "riot-ratelimiter@^0.0.9",
  "_where": "/Users/chriszuis/dev/pets/node_modules/kayn",
  "author": {
    "name": "Jonas Krispin"
  },
  "bugs": {
    "url": "https://github.com/Colorfulstan/RiotRateLimiter-node/issues"
  },
  "dependencies": {
    "bluebird": "~3.5.0",
    "request-promise": "~4.2.1",
    "runtime-engine-check": "^1.0.0",
    "semver": "^5.3.0"
  },
  "description": "A rate limiter handling rate-limits enforced by the riot-games api",
  "devDependencies": {
    "@types/chai": "^4.0.2",
    "@types/chai-as-promised": "0.0.31",
    "@types/circular-json": "^0.1.30",
    "@types/mocha": "^2.2.40",
    "@types/node": "^8.0.19",
    "@types/semver": "^5.3.31",
    "bottleneck": "~1.16.0",
    "chai": "~4.1.1",
    "chai-as-promised": "~7.1.1",
    "chalk": "^2.0.1",
    "commander": "^2.9.0",
    "coveralls": "^2.12.0",
    "cross-env": "~5.0.4",
    "git-mods": "~1.0.7",
    "graceful-fs": "^4.1.11",
    "husky": "^0.14.3",
    "istanbul": "^0.4.5",
    "mocha": "^3.5.0",
    "node-emoji": "^1.5.1",
    "npm-check-updates": "^2.10.3",
    "npm-run-batch": "0.0.6",
    "npm-sh": "^1.0.1",
    "nsp": "^2.6.3",
    "nsp-formatter-checkstyle": "^1.0.1",
    "nsp-formatter-remarkup": "^1.0.2",
    "parse-git-config": "^1.1.1",
    "pkg-ok": "^1.0.1",
    "remap-istanbul": "^0.9.1",
    "rimraf": "^2.6.1",
    "shelljs-nodecli": "^0.1.1",
    "sinon": "~3.0.0",
    "ts-node": "~3.3.0",
    "tslint": "^5.5.0",
    "typescript": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-aKGlp/cgLZxfVq4iNEjNOJPuFFCdmzQVEheJnewEvjSHmLaIIyHPe62i5a8N4vhlNsom1BTpNJX8KlFzRnceFw==",
    "shasum": "69eac67a9f1fb25d4b4082d3f1e281d9ef5ed8c9",
    "tarball": "https://registry.npmjs.org/riot-ratelimiter/-/riot-ratelimiter-0.0.9.tgz"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "files": [
    "dist"
  ],
  "gitHead": "7f7de6dd63bc909e0447d677014496e5447bfb8b",
  "homepage": "https://github.com/Colorfulstan/RiotRateLimiter-node#readme",
  "keywords": [
    "TypeScript",
    "nodeJs",
    "riot-api",
    "ratelimiter"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "colorfulstan",
      "email": "npm@krispin.it"
    }
  ],
  "name": "riot-ratelimiter",
  "optionalDependencies": {},
  "private": false,
  "readme": "# RiotRateLimiter-node\n\nA rate limiter handling rate-limits enforced by the riot-games api. Automatically creates and updates\nrate-limiters on a per region and method base,\nrespecting app-limits, method limits and generic backoff on service/underlying service limits.\n\n## Getting Started\n\n```npm install riot-ratelimiter```\n```\n  const RiotRateLimiter = require('riot-ratelimiter')\n  const limiter = new RiotRateLimiter()\n\n  limiter.executing({\n    url: 'validRiotApiUrl',\n    token: <RIOT_API_KEY>,\n\n    // will resolve the Promise with the full API response Object\n    // omit or set to false if you are only interested in the data.\n    // in case of an error (404/500/503) the Promise will always be rejected with the full response.\n    resolveWithFullResponse: true\n  })\n```\n\n### Prerequisites\n\nYou need to know how to work with Promises.\nThis module uses promise-request for the actual requests.\n\n### Automatic limit synchronisation with RIOT Headers\n\nThe region and method used will be determined from the given url.\nWhen a new ratelimiter is created (on the first request to a region and method)\na single synchronisation Request will be executed to find out about the relevant limits\nand the current limit-counts for that method/region on your API-Key.\n\nThis ensures you can not hit more then one 429 (per RiotRateLimiter instance) when starting up your app.\nThe received limits and counts will then be set acchordingly and used processing additional resets.\n\nSee \"[Choosing the right strategy](#choosing-the-right-strategy)\" below for information on additional synchronisation requests done depending on strategy.\n\n### Choosing the right strategy\n\nWe currently offer two strategies for your limiting needs:\n```STRATEGY.SPREAD``` (default) and ```STRATEGY.BURST```\n\n#### SPREAD (default)\nSPREAD will ensure you don't hit the rate-limit by spreading out the requests to fit into the given time-window and remaining limit-count.\nFor example if a limit resets every 10 seconds and you can do 100 requests in that window, one request will be done every 0.1 seconds (actually there is a margin of x% to really ensure you don't hit the limit).\nThis spread-interval is calculated on a per request base using the current limit-counts and limits received from the RIOT API.\n\nThis basically means every request done when using STRATEGY.SPREAD will act as a synchronisation request, which should prevent most issues when using it in a multi-instance scenario.\n\n#### BURST (use with care / needs improvements)\nBURST will try to execute all the requests you pass in immediately if possible.\nThis strategy can become highly volatile to getting out of synch with the actual limit-counts on the RIOT API edge, so this should be used with care (and will need improvement over time).\nEach time a limit resets, the next request done will act as synchronisation request, to prevent throwing a huge amount of requests into an exceeded limit.\n\nIt is recommended for following scenarios:\n\n* single app-instance\n* you need to execute a lot of requests in bulk, but don't throw huge bulks at the ratelimiter constantly\n* you want to figure out how to improve this issue :)\n\nRiotRateLimiter will keep track of the reset timer for the method, starting from from the synchronisation request.\nBecause there are no limit-window information given by riot this timer might wait longer then neccessary when the rate-limit will be approached (the full reset time),\neven if there are only a few requests left in the limit-count.\nAll requests that would exceed the limit will be queeud up to be executed as soon as the the limit resets.\n\n## Treatment of Error Responses\n\n### 429 with retry-after Header (App- or Methodlimit exceeded)\nThese requests will be rescheduled (first in queue) and the executing limiter\nwill back off for the duration given by the retry-after Header.\n\n### 429 without retry-after Header (Underlying API System)\nThese requests will be rescheduled (first in queue) and the executing limiter\nwill backoff generically.\n\nThis means it will start with a backoff timer on the first try (eg. 1000 MS)\nand increase the backoff time exponentially with each unsuccessful try (2000, 4000, 8000, ...).\n\n### Other errors\nWill be passed back to the caller by rejecting the promise returned from ```.executing```\n\n## Running the tests\n\nYou will need to add your (development) api-key to a file ```/src/API_KEY``` to run the tests within ```src/RiotRateLimiter```\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags).\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Colorfulstan/RiotRateLimiter-node.git"
  },
  "run-batch": {
    "build": [
      "clean",
      "pkg-ok",
      "lint",
      "compile:build",
      "test"
    ],
    "build:watch": [
      "compile:watch"
    ],
    "build:dist": [
      "pkg-ok",
      "lint",
      "clean",
      "compile:build",
      "test:dist",
      "clean:dist",
      "compile:dist"
    ],
    "test:dist": [
      "test-with-cover",
      "remap-coverage:dist"
    ],
    "test": [
      "test-with-cover",
      "remap-coverage"
    ],
    "precommit": [
      "build",
      "staged-mods-ok"
    ],
    "prepush": [
      "build:dist",
      "check",
      "secure",
      "no-mods"
    ]
  },
  "scripts": {
    "build": "npm-run-batch",
    "build:dist": "run-batch",
    "build:watch": "cross-env NODE_ENV=production run-batch",
    "check": "ncu -e 1",
    "clean": "rimraf build coverage",
    "clean:dist": "rimraf dist",
    "compile:build": "tsc",
    "compile:dist": "tsc -p tsconfig.dist.json",
    "compile:watch": "tsc -w",
    "coverage": "istanbul check-coverage ./coverage/typescript/coverage.json",
    "lint": "tslint -c tslint.json src/**/*.ts",
    "no-mods": "git-mods",
    "pkg-ok": "pkg-ok",
    "precommit": "run-batch",
    "prepush": "run-batch",
    "remap-coverage": "node ./scripts/remapped-coverage.js --force_min_cover=false --output ./coverage/typescript",
    "remap-coverage:dist": "node ./scripts/remapped-coverage.js --force_min_cover true --output ./coverage/typescript",
    "secure": "nsp check",
    "sh": "npm-sh",
    "staged-mods-ok": "git-mods --staged_ok",
    "test": "run-batch",
    "test-with-cover": "istanbul cover ./node_modules/mocha/bin/_mocha",
    "test-without-cover": "mocha",
    "test:dist": "run-batch"
  },
  "standard": {
    "env": [
      "mocha"
    ]
  },
  "types": "dist/index.d.ts",
  "version": "0.0.9"
}
