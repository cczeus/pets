"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var React = require("react");
var classnames = require("classnames");

var MainButton = (function (_React$Component) {
  function MainButton(props) {
    _classCallCheck(this, MainButton);

    _get(Object.getPrototypeOf(MainButton.prototype), "constructor", this).call(this, props);
  }

  _inherits(MainButton, _React$Component);

  _createClass(MainButton, {
    render: {
      value: function render() {
        var iconResting = classnames("mfb-component__main-icon--resting", this.props.iconResting);
        var iconActive = classnames("mfb-component__main-icon--active", this.props.iconActive);
        var mainClass = classnames("mfb-component__button--main", this.props.className);
        if (this.props.label) {
          return React.createElement(
            "a",
            { href: this.props.href, style: this.props.style, className: mainClass, onClick: this.props.onClick, "data-mfb-label": this.props.label },
            React.createElement("i", { className: iconResting }),
            React.createElement("i", { className: iconActive })
          );
        } else {
          return React.createElement(
            "a",
            { href: this.props.href, style: this.props.style, className: mainClass, onClick: this.props.onClick },
            React.createElement("i", { className: iconResting }),
            React.createElement("i", { className: iconActive })
          );
        }
      }
    }
  });

  return MainButton;
})(React.Component);

MainButton.defaultProps = {
  href: "#",
  onClick: function onClick() {},
  iconResting: "",
  iconActive: "",
  label: null
};

module.exports = MainButton;