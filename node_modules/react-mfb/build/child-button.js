"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var React = require("react");
var classnames = require("classnames");

var ChildButton = (function (_React$Component) {
  function ChildButton(props) {
    _classCallCheck(this, ChildButton);

    _get(Object.getPrototypeOf(ChildButton.prototype), "constructor", this).call(this, props);

    this.handleOnClick = this.handleOnClick.bind(this);
  }

  _inherits(ChildButton, _React$Component);

  _createClass(ChildButton, {
    handleOnClick: {
      value: function handleOnClick() {
        if (this.props.disabled === true) {
          return;
        }

        if (this.props.onClick) {
          this.props.onClick();
        }
      }
    },
    render: {
      value: function render() {
        var iconClass = classnames("mfb-component__child-icon", this.props.icon);
        var className = classnames("mfb-component__button--child", this.props.className, { "mfb-component__button--disabled": this.props.disabled });
        return React.createElement(
          "li",
          null,
          React.createElement(
            "a",
            { href: this.props.href,
              "data-mfb-label": this.props.label,
              onClick: this.handleOnClick,
              style: this.props.style,
              className: className },
            React.createElement("i", { className: iconClass })
          )
        );
      }
    }
  });

  return ChildButton;
})(React.Component);

module.exports = ChildButton;